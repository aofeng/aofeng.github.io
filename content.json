{"meta":{"title":"聂勇的个人网站","subtitle":"0与1构筑世界，程序员创造时代","description":"l软件 架构 设计 编程 Java Python Nodejs","author":"聂勇","url":"http://aofeng.github.io"},"pages":[],"posts":[{"title":"MySQL5.5-将字符集从utf8升级为utf8mb4","slug":"MySQL5-5-将字符集从utf8升级为utf8mb4","date":"2016-01-04T12:08:44.000Z","updated":"2016-11-06T11:40:01.000Z","comments":true,"path":"2016/01/04/MySQL5-5-将字符集从utf8升级为utf8mb4/","link":"","permalink":"http://aofeng.github.io/2016/01/04/MySQL5-5-将字符集从utf8升级为utf8mb4/","excerpt":"","text":"&#x4E00;&#x3001;&#x5347;&#x7EA7;&#x524D; &#x4E8C;&#x3001;&#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6; &#x4E09;&#x3001;&#x5347;&#x7EA7;&#x540E; MySQL&#x9ED8;&#x8BA4;&#x7684;utf8&#x53EA;&#x652F;&#x6301;&#x4E09;&#x5B57;&#x8282;&#x5B57;&#x7B26;&#xFF0C;&#x4E0D;&#x652F;&#x6301;Emoji&#x8868;&#x60C5;&#x7B26;&#xFF08;&#x56DB;&#x5B57;&#x8282;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x56DB;&#x5B57;&#x8282;&#x7684;&#x5B57;&#x7B26;&#x5199;&#x5165;&#x4F1A;&#x62A5;&#x9519;&#x3002;&#x4ECE;MySQL 5.5&#x5F00;&#x59CB;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;utf8mb4&#xFF0C;&#x652F;&#x6301;&#x56DB;&#x5B57;&#x8282;&#x7684;&#x5B57;&#x7B26;&#x3002;&#x8BB8;&#x591A;&#x4F7F;&#x7528;iphone&#x7684;&#x7528;&#x6237;&#x6765;&#x5728;&#x586B;&#x5199;&#x6635;&#x79F0;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x52A0;&#x5165;Emoji&#x8868;&#x60C5;&#x7B26;&#xFF0C;&#x5982;&#x679C;MySQL&#x6CA1;&#x6709;&#x4F7F;&#x7528;utf8mb4&#x5B57;&#x7B26;&#x96C6;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x6635;&#x79F0;&#x4FE1;&#x606F;&#x5C31;&#x65E0;&#x6CD5;&#x5199;&#x5165;&#x3002; &#x4E00;&#x3001;&#x5347;&#x7EA7;&#x524D;1mysql&gt; SHOW VARIABLES LIKE &apos;character_set%&apos;; Variable_name Value character_set_client utf8 character_set_connection utf8 character_set_database utf8 character_set_filesystem binary character_set_results utf8 character_set_server utf8 character_set_system utf8 character_sets_dir /home/sdkserver/local/mysql-5.5.43/share/charsets/ 8 rows in set (0.00 sec) 1mysql&gt; SHOW VARIABLES LIKE &apos;collation%&apos;; Variable_name Value collation_connection utf8_general_ci collation_database utf8_unicode_ci collation_server utf8_unicode_ci 3 rows in set (0.00 sec) &#x4E8C;&#x3001;&#x4FEE;&#x6539;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x6253;&#x5F00;MySQL&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x5C06;&#x5B57;&#x7B26;&#x96C6;&#x7684;&#x914D;&#x7F6E;&#x4FEE;&#x6539;&#x6210;&#x5982;&#x4E0B;&#xFF1A;1234567891011[client] default-character-set = utf8mb4[mysql] default-character-set = utf8mb4[mysqld] character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_general_ciinit_connect=&apos;SET NAMES utf8mb4&apos; &#x4E09;&#x3001;&#x5347;&#x7EA7;&#x540E;1mysql&gt; SHOW VARIABLES LIKE &apos;character_set%&apos;; Variable_name Value character_set_client utf8mb4 character_set_connection utf8mb4 character_set_database utf8mb4 character_set_filesystem binary character_set_results utf8mb4 character_set_server utf8mb4 character_set_system utf8 character_sets_dir /home/nieyong/local/mysql-5.5.43/share/charsets/ 8 rows in set (0.00 sec) 1mysql&gt; SHOW VARIABLES LIKE &apos;collation%&apos;; Variable_name Value collation_connection utf8mb4_general_ci collation_database utf8mb4_general_ci collation_server utf8mb4_general_ci 3 rows in set (0.00 sec)","categories":[{"name":"数据库","slug":"数据库","permalink":"http://aofeng.github.io/categories/数据库/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"http://aofeng.github.io/categories/数据库/MySQL/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://aofeng.github.io/tags/mysql/"},{"name":"数据库","slug":"数据库","permalink":"http://aofeng.github.io/tags/数据库/"}],"keywords":[{"name":"数据库","slug":"数据库","permalink":"http://aofeng.github.io/categories/数据库/"},{"name":"MySQL","slug":"数据库/MySQL","permalink":"http://aofeng.github.io/categories/数据库/MySQL/"}]},{"title":"Gson-自定义反序列化","slug":"Gson-自定义反序列化","date":"2015-08-17T12:21:12.000Z","updated":"2016-11-06T11:51:08.000Z","comments":true,"path":"2015/08/17/Gson-自定义反序列化/","link":"","permalink":"http://aofeng.github.io/2015/08/17/Gson-自定义反序列化/","excerpt":"","text":"&#x4E00;&#x3001;&#x9700;&#x6C42; &#x4E8C;&#x3001;&#x5B9E;&#x73B0; 1&#x3001;&#x81EA;&#x5B9A;&#x4E49;&#x53CD;&#x5E8F;&#x5217;&#x5316; 2&#x3001;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316; &#x4E09;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; &#x4E0A;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x300A;Gson&#x6559;&#x7A0B;-&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x300B;&#x4ECB;&#x7ECD;&#x4E86;&#x4F7F;&#x7528;Gson&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x6EE1;&#x8DB3;&#x4E00;&#x4E9B;&#x4E1A;&#x52A1;&#x573A;&#x666F;&#x4E0B;&#x7684;&#x9700;&#x6C42;&#x3002;&#x540C;&#x6837;&#x7684;&#xFF0C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF08;JSON&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;Java&#x5BF9;&#x8C61;&#xFF09;&#x4E5F;&#x9700;&#x8981;&#x81EA;&#x5B9A;&#x4E49;&#xFF0C;&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x4E0E;&#x5E8F;&#x5217;&#x5316;&#x4E00;&#x6837;&#xFF0C;&#x4E24;&#x6B65;&#x641E;&#x5B9A;&#xFF1A; &#x5B9E;&#x73B0;JsonDeserializer&#x63A5;&#x53E3;&#x3002; &#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;&#x3002; &#x4E00;&#x3001;&#x9700;&#x6C42;1&#x3001;&#x6709;&#x5982;&#x4E0B;JSON&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x9700;&#x8981;&#x8F6C;&#x6362;&#x6210;Person&#x5BF9;&#x8C61;&#x3002; {&#x201C;PersonName&#x201D;:&#x201D;aofeng&#x201D;,&#x201D;PersonAge&#x201D;:32} 2&#x3001;Person&#x6709;&#x4E24;&#x4E2A;&#x5C5E;&#x6027;&#xFF1A;name&#x548C;age&#xFF0C;&#x70B9;&#x51FB;&#x67E5;&#x770B;&#x6E90;&#x4EE3;&#x7801;&#x3002; &#x4E8C;&#x3001;&#x5B9E;&#x73B0;1&#x3001;&#x81EA;&#x5B9A;&#x4E49;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;JsonDeserializer&#x63A5;&#x53E3;&#x7684;deserialize&#x65B9;&#x6CD5;&#xFF1A;123456789101112131415public static class PersonDeserializer implements JsonDeserializer&lt;Person&gt; { @Override public Person deserialize(JsonElement jsonEle, Type type, JsonDeserializationContext context) throws JsonParseException { JsonObject jo = jsonEle.getAsJsonObject(); String name = jo.get(&quot;PersonName&quot;).getAsString(); int age = jo.get(&quot;PersonAge&quot;).getAsInt(); Person obj = new Person(name, age); return obj; } } 2&#x3001;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;GsonBuilder&#xFF0C;&#x4F7F;&#x7528;registerTypeAdapter&#x65B9;&#x6CD5;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;&#xFF0C;&#x7136;&#x540E;&#x751F;&#x6210;Gson&#x5BF9;&#x8C61;&#x6765;&#x8FDB;&#x884C;&#x5E8F;&#x5217;&#x5316;&#x3002;123456789public static void main(String[] args) { GsonBuilder builder = new GsonBuilder(); builder.registerTypeAdapter(Person.class, new PersonDeserializer()); Gson gson = builder.create(); String json = &quot;{\\&quot;PersonName\\&quot;:\\&quot;aofeng\\&quot;,\\&quot;PersonAge\\&quot;:32}&quot;; Person obj = gson.fromJson(json, Person.class); System.out.println(obj);} &#x8FD0;&#x884C;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#xFF0C;&#x8F93;&#x51FA;&#x4FE1;&#x606F;&#x5982;&#x4E0B;: Person [name=aofeng, age=32] &#x9644;&#xFF1A;&#x5B8C;&#x6574;&#x7684;&#x6E90;&#x4EE3;&#x7801; &#x4E09;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; Gson Offical Site Gson User Guide","categories":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://aofeng.github.io/tags/java/"},{"name":"gson","slug":"gson","permalink":"http://aofeng.github.io/tags/gson/"},{"name":"json","slug":"json","permalink":"http://aofeng.github.io/tags/json/"},{"name":"serialize","slug":"serialize","permalink":"http://aofeng.github.io/tags/serialize/"},{"name":"序列化","slug":"序列化","permalink":"http://aofeng.github.io/tags/序列化/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}]},{"title":"Gson-自定义序列化","slug":"Gson-自定义序列化","date":"2015-08-14T12:13:56.000Z","updated":"2016-11-06T11:51:32.000Z","comments":true,"path":"2015/08/14/Gson-自定义序列化/","link":"","permalink":"http://aofeng.github.io/2015/08/14/Gson-自定义序列化/","excerpt":"","text":"&#x4E00;&#x3001;&#x9700;&#x6C42; &#x4E8C;&#x3001;&#x5B9E;&#x73B0; 1&#x3001;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316; 2&#x3001;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316; &#x4E09;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; &#x4E0A;&#x4E00;&#x7BC7;&#x6587;&#x7AE0;&#x300A;Gson&#x6559;&#x7A0B;-&#x5E8F;&#x5217;&#x5316;&#x4E0E;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x57FA;&#x7840;&#x64CD;&#x4F5C;&#x300B;&#x4ECB;&#x7ECD;&#x4E86;Gson&#x7684;&#x7279;&#x6027;&#x548C;&#x57FA;&#x672C;&#x7684;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#x3002;&#x5982;&#x679C;&#x78B0;&#x4E0A;&#x4E00;&#x4E9B;&#x7279;&#x6B8A;&#x7684;&#x4F7F;&#x7528;&#x573A;&#x666F;&#xFF1A; &#x51FA;&#x751F;&#x65E5;&#x671F;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x6BEB;&#x79D2;&#x6570;&#xFF0C;&#x4F46;&#x8F93;&#x51FA;JSON&#x65F6;&#x9700;&#x8981;&#x662F;&#x5E74;&#x6708;&#x65E5;&#x7684;&#x683C;&#x5F0F;&#xFF1B; &#x6709;&#x4E9B;&#x5B57;&#x6BB5;&#x4E0D;&#x60F3;&#x8F93;&#x51FA;&#xFF1B; &#x8F93;&#x51FA;&#x7684;&#x5B57;&#x6BB5;&#x540D;&#x4E0E;&#x5BF9;&#x8C61;&#x4E2D;&#x7684;&#x5B57;&#x6BB5;&#x540D;&#x4E0D;&#x76F8;&#x540C;&#x3002; &#x600E;&#x4E48;&#x529E;&#x5462;&#xFF1F;Gson&#x63D0;&#x4F9B;&#x4E86;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x5E76;&#x4E14;&#x5B9E;&#x73B0;&#x4E5F;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x4E24;&#x6B65;&#x641E;&#x5B9A;&#xFF1A; &#x5B9E;&#x73B0;JsonSerializer&#x63A5;&#x53E3;&#x3002; &#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;&#x3002; &#x4E00;&#x3001;&#x9700;&#x6C42;1&#x3001;&#x4E00;&#x4E2A;POJO&#x7C7B;&#xFF1A;Person&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x5C5E;&#x6027;&#xFF1A;name&#x548C;age&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#x3002;2&#x3001;&#x5E8F;&#x5217;&#x5316;&#x6210;JSON&#x5B57;&#x7B26;&#x4E32;&#x65F6;&#xFF0C;name&#x5B57;&#x6BB5;&#x540D;&#x8F93;&#x51FA;&#x4E3A;PersonName&#xFF0C;age&#x5B57;&#x6BB5;&#x540D;&#x8F93;&#x51FA;&#x4E3A;PersonAge&#x3002;123456789101112131415161718192021222324252627282930313233343536373839404142/** ** * &#x7B80;&#x5355;&#x7684;Java&#x5BF9;&#x8C61;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class Person { private String name; private int age; public Person() { // nothing } public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;; }} &#x4E8C;&#x3001;&#x5B9E;&#x73B0;1&#x3001;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;JsonSerializer&#x63A5;&#x53E3;&#x7684;serialize&#x65B9;&#x6CD5;&#xFF0C;&#x60F3;&#x600E;&#x4E48;&#x5F04;&#x90FD;&#x53EF;&#x4EE5;&#x968F;&#x5FC3;&#x6240;&#x6B32; :)12345678910111213public class PersonSerializer implements JsonSerializer&lt;Person&gt; { @Override public JsonElement serialize(Person obj, Type type, JsonSerializationContext context) { JsonObject jo = new JsonObject(); jo.addProperty(&quot;PersonName&quot;, obj.getName()); jo.addProperty(&quot;PersonAge&quot;, obj.getAge()); return jo; }} 2&#x3001;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;GsonBuilder&#xFF0C;&#x4F7F;&#x7528;registerTypeAdapter&#x65B9;&#x6CD5;&#x6CE8;&#x518C;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x5B9E;&#x73B0;&#xFF0C;&#x7136;&#x540E;&#x751F;&#x6210;Gson&#x5BF9;&#x8C61;&#x6765;&#x8FDB;&#x884C;&#x5E8F;&#x5217;&#x5316;&#x3002;12345678public static void main(String[] args) { GsonBuilder builder = new GsonBuilder(); builder.registerTypeAdapter(Person.class, new PersonSerializer()); Gson gson = builder.create(); Person obj = new Person(&quot;aofeng&quot;, 32); System.out.println( gson.toJson(obj) );} &#x8FD0;&#x884C;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#xFF0C;&#x8F93;&#x51FA;&#x4FE1;&#x606F;&#x5982;&#x4E0B;: {&#x201C;PersonName&#x201D;:&#x201D;aofeng&#x201D;,&#x201D;PersonAge&#x201D;:32} &#x9644;&#xFF1A;&#x5B8C;&#x6574;&#x7684;&#x6E90;&#x4EE3;&#x7801; &#x4E09;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; Gson Offical Site Gson User Guide","categories":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://aofeng.github.io/tags/java/"},{"name":"gson","slug":"gson","permalink":"http://aofeng.github.io/tags/gson/"},{"name":"json","slug":"json","permalink":"http://aofeng.github.io/tags/json/"},{"name":"serialize","slug":"serialize","permalink":"http://aofeng.github.io/tags/serialize/"},{"name":"序列化","slug":"序列化","permalink":"http://aofeng.github.io/tags/序列化/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}]},{"title":"Gson-序列化与反序列化基础操作","slug":"Gson-序列化与反序列化基础操作","date":"2015-08-12T11:57:18.000Z","updated":"2016-11-06T11:40:05.000Z","comments":true,"path":"2015/08/12/Gson-序列化与反序列化基础操作/","link":"","permalink":"http://aofeng.github.io/2015/08/12/Gson-序列化与反序列化基础操作/","excerpt":"","text":"&#x4E00;&#x3001;&#x666E;&#x901A;&#x5BF9;&#x8C61;&#xFF08;POJO&#xFF09; &#x4E8C;&#x3001;&#x6570;&#x7EC4; 1&#x3001;&#x5E8F;&#x5217;&#x5316; 2&#x3001;&#x53CD;&#x5E8F;&#x5217;&#x5316; &#x4E09;&#x3001;&#x96C6;&#x5408;&#x7C7B; 1&#x3001;&#x5E8F;&#x5217;&#x5316; 2&#x3001;&#x53CD;&#x5E8F;&#x5217;&#x5316; &#x56DB;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; Gson&#x662F;&#x4F17;&#x591A;&#x5F00;&#x6E90;JSON&#x7C7B;&#x5E93;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#xFF0C;&#x4F7F;&#x7528;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF0C;&#x4F7F;&#x7528;toJson&#x548C;fromJson&#x65B9;&#x6CD5;&#x53EF;&#x5C06;JSON&#x5B57;&#x7B26;&#x4E32;&#x548C;Java&#x5BF9;&#x8C61;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x7279;&#x6027;&#x6709;&#xFF1A; &#x5168;&#x9762;&#x652F;&#x6301;&#x6CDB;&#x578B;&#x3002; Java&#x5BF9;&#x8C61;&#x4E0D;&#x9700;&#x8981;&#x5728;&#x6E90;&#x4EE3;&#x7801;&#x4E2D;&#x589E;&#x52A0;&#x6CE8;&#x89E3;&#x5C31;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002; &#x8F6C;&#x6362;&#x65F6;&#x4F7F;&#x7528;Java&#x5BF9;&#x8C61;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x800C;&#x975E;setter&#x548C;getter&#x65B9;&#x6CD5;&#x3002; &#x53EF;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x6EE1;&#x8DB3;&#x4E2A;&#x6027;&#x5316;&#x9700;&#x6C42;&#xFF0C;&#x751A;&#x81F3;&#x7F16;&#x5199;&#x81EA;&#x5DF1;&#x7684;TypeAdapter&#x6539;&#x53D8;&#x5E95;&#x5C42;&#x7684;&#x89E3;&#x6790;&#x3002; &#x4E0B;&#x9762;&#xFF0C;&#x901A;&#x8FC7;&#x51E0;&#x6BB5;&#x4EE3;&#x7801;&#x5C55;&#x793A;Gson&#x5982;&#x4F55;&#x5C06;Java&#x4E2D;&#x5E38;&#x7528;&#x7684;POJO&#x3001;&#x6570;&#x7EC4;&#x548C;&#x96C6;&#x5408;&#x5E8F;&#x5217;&#x5316;&#x6210;JSON&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5E76;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; &#x4E00;&#x3001;&#x666E;&#x901A;&#x5BF9;&#x8C61;&#xFF08;POJO&#xFF09;1&#x3001;&#x4E00;&#x4E2A;POJO&#x7C7B;&#xFF1A;Person&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x5C5E;&#x6027;&#xFF1A;name&#x548C;age&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;123456789101112131415161718192021222324252627282930313233343536373839404142/** ** * &#x7B80;&#x5355;&#x7684;Java&#x5BF9;&#x8C61;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class Person { private String name; private int age; public Person() { // nothing } public Person(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } @Override public String toString() { return &quot;Person [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;; }} 2&#x3001;&#x5BF9;Person&#x8FDB;&#x884C;&#x5E8F;&#x5217;&#x5316;&#x4E0E;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;1234567891011121314151617181920212223242526272829303132333435/** * Java&#x7B80;&#x5355;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x4E0E;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class SimpleObjectSerialize { /** * &#x5E8F;&#x5217;&#x5316;&#xFF1A;&#x5C06;Java&#x5BF9;&#x8C61;&#x8F6C;&#x6362;&#x6210;JSON&#x5B57;&#x7B26;&#x4E32;&#x3002; */ public void serialize(Person person) { Gson gson = new Gson(); System.out.println( gson.toJson(person) ); } /** * &#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF1A;&#x5C06;JSON&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;Java&#x5BF9;&#x8C61;&#x3002; */ public void deserialize(String json) { Gson gson = new Gson(); Person person = gson.fromJson(json, Person.class); System.out.println( person ); } public static void main(String[] args) { SimpleObjectSerialize ss = new SimpleObjectSerialize(); Person person = new Person(&quot;NieYong&quot;, 33); ss.serialize(person); String json = &quot; {\\&quot;name\\&quot;:\\&quot;AoFeng\\&quot;,\\&quot;age\\&quot;:32}&quot;; ss.deserialize(json); }} &#x8FD0;&#x884C;SimpleObjectSerialize&#xFF0C;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; {&#x201C;name&#x201D;:&#x201D;NieYong&#x201D;,&#x201D;age&#x201D;:33}Person [name=AoFeng, age=32] &#x4E8C;&#x3001;&#x6570;&#x7EC4;1&#x3001;&#x5E8F;&#x5217;&#x5316;&#x5C06;&#x6574;&#x578B;&#x5BF9;&#x8C61;&#x6570;&#x7EC4;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;&#x548C;&#x5BF9;&#x8C61;&#x6570;&#x7EC4;&#x5E8F;&#x5217;&#x5316;&#x6210;JSON&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;12345678910111213141516171819202122232425262728293031323334353637/** * &#x6570;&#x7EC4;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x4E0E;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class ArraySerialize { public void serialize(Object[] arr) { Gson gson = new Gson(); System.out.println( gson.toJson(arr) ); } public static void main(String[] args) { ArraySerialize as = new ArraySerialize(); // &#x6574;&#x578B;&#x5BF9;&#x8C61;&#x6570;&#x7EC4; Integer[] intArr = new Integer[3]; intArr[0] = 9; intArr[1] = 7; intArr[2] = 5; as.serialize(intArr); // &#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4; String[] names = new String[3]; names[0] = &quot;&#x5F20;&#x4E09;&quot;; names[1] = &quot;&#x674E;&#x56DB;&quot;; names[2] = &quot;&#x738B;&#x4E94;&quot;; as.serialize(names); // &#x5BF9;&#x8C61;&#x6570;&#x7EC4; Person[] persons = new Person[2]; persons[0] = new Person(&quot;&#x5C0F;&#x660E;&quot;, 10); persons[1] = new Person(&quot;&#x9A6C;&#x4E3D;&quot;, 9); as.serialize(persons); }} &#x8FD0;&#x884C;ArraySerialize&#xFF0C;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; [9,7,5][&#x201C;&#x5F20;&#x4E09;&#x201D;,&#x201D;&#x674E;&#x56DB;&#x201D;,&#x201D;&#x738B;&#x4E94;&#x201D;][{&#x201C;name&#x201D;:&#x201D;&#x5C0F;&#x660E;&#x201D;,&#x201D;age&#x201D;:10},{&#x201C;name&#x201D;:&#x201D;&#x9A6C;&#x4E3D;&#x201D;,&#x201D;age&#x201D;:9}] 2&#x3001;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5C06;JSON&#x5B57;&#x7B26;&#x4E32;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x6210;&#x6574;&#x578B;&#x5BF9;&#x8C61;&#x6570;&#x7EC4;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;&#x548C;&#x5BF9;&#x8C61;&#x6570;&#x7EC4;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;1234567891011121314151617181920212223242526272829303132333435363738394041/** * &#x6570;&#x7EC4;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class ArrayDeserialize { public &lt;T&gt; T deserialize(String json, Class&lt;T&gt; claz) { Gson gson = new Gson(); return gson.fromJson(json, claz); } public static void main(String[] args) { ArrayDeserialize ad = new ArrayDeserialize(); // &#x6574;&#x578B;&#x6570;&#x7EC4; String intArrJson = &quot;[9,7,5]&quot;; int[] intArr = ad.deserialize(intArrJson, int[].class); System.out.println(&quot;---------- &#x6574;&#x578B;&#x6570;&#x7EC4; ----------&quot;); for (int i : intArr) { System.out.println(i); } // &#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4; String strArrJson = &quot;[\\&quot;&#x5F20;&#x4E09;\\&quot;,\\&quot;&#x674E;&#x56DB;\\&quot;,\\&quot;&#x738B;&#x4E94;\\&quot;]&quot;; String[] strArr = ad.deserialize(strArrJson, String[].class); System.out.println(&quot;---------- &#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4; ----------&quot;); for (String str : strArr) { System.out.println(str); } // &#x5BF9;&#x8C61;&#x6570;&#x7EC4; String objArrJson = &quot;[{\\&quot;name\\&quot;:\\&quot;&#x5C0F;&#x660E;\\&quot;,\\&quot;age\\&quot;:10},{\\&quot;name\\&quot;:\\&quot;&#x9A6C;&#x4E3D;\\&quot;,\\&quot;age\\&quot;:9}]&quot;; Person[] objArr = ad.deserialize(objArrJson, Person[].class); System.out.println(&quot;---------- &#x5BF9;&#x8C61;&#x6570;&#x7EC4; ----------&quot;); for (Person person : objArr) { System.out.println(person); } }} &#x8FD0;&#x884C;ArrayDeserialize&#xFF0C;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; &#x2014;&#x2014;&#x2014;- &#x6574;&#x578B;&#x6570;&#x7EC4; &#x2014;&#x2014;&#x2014;-975&#x2014;&#x2014;&#x2014;- &#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4; &#x2014;&#x2014;&#x2014;-&#x5F20;&#x4E09;&#x674E;&#x56DB;&#x738B;&#x4E94;&#x2014;&#x2014;&#x2014;- &#x5BF9;&#x8C61;&#x6570;&#x7EC4; &#x2014;&#x2014;&#x2014;-Person [name=&#x5C0F;&#x660E;, age=10]Person [name=&#x9A6C;&#x4E3D;, age=9] &#x4E09;&#x3001;&#x96C6;&#x5408;&#x7C7B;1&#x3001;&#x5E8F;&#x5217;&#x5316;&#x5C06;List&#x3001;Set&#x548C;Map&#x5E8F;&#x5217;&#x5316;&#x6210;JSON&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;123456789101112131415161718192021222324252627282930313233343536373839404142/** * &#x96C6;&#x5408;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class CollectionsSerialize { public void serialize(Collection&lt;?&gt; c) { Gson gson = new Gson(); System.out.println( gson.toJson(c) ); } public void serialize(Map&lt;?, ?&gt; map) { Gson gson = new Gson(); System.out.println( gson.toJson(map) ); } public static void main(String[] args) { CollectionsSerialize cs = new CollectionsSerialize(); // &#x6574;&#x578B;List List&lt;Integer&gt; intList = new ArrayList&lt;Integer&gt;(); intList.add(9); intList.add(8); intList.add(0); cs.serialize(intList); // &#x5B57;&#x7B26;&#x4E32;Set Set&lt;String&gt; strSet = new HashSet&lt;String&gt;(); strSet.add(&quot;Hello&quot;); strSet.add(&quot;World&quot;); strSet.add(&quot;Best&quot;); cs.serialize(strSet); // Map Map&lt;String, Person&gt; objMap = new HashMap&lt;String, Person&gt;(); objMap.put(&quot;marry&quot;, new Person(&quot;&#x9A6C;&#x4E3D;&quot;, 20)); objMap.put(&quot;xiaomin&quot;, new Person(&quot;&#x5C0F;&#x660E;&quot;, 21)); cs.serialize(objMap); }} &#x8FD0;&#x884C;CollectionsSerialize&#xFF0C;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; [9,8,0][&#x201C;Best&#x201D;,&#x201D;World&#x201D;,&#x201D;Hello&#x201D;]{&#x201C;xiaomin&#x201D;:{&#x201C;name&#x201D;:&#x201D;&#x5C0F;&#x660E;&#x201D;,&#x201D;age&#x201D;:21},&#x201D;marry&#x201D;:{&#x201C;name&#x201D;:&#x201D;&#x9A6C;&#x4E3D;&#x201D;,&#x201D;age&#x201D;:20}} 2&#x3001;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5C06;JSON&#x5B57;&#x7B26;&#x4E32;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x6210;List&#x3001;Set&#x548C;Map&#x5BF9;&#x8C61;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * &#x96C6;&#x5408;&#x7684;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; * * @author &lt;a href=&quot;mailto:aofengblog@163.com&quot;&gt;&#x8042;&#x52C7;&lt;/a&gt; */public class CollectionDeserialize { public &lt;T&gt; T deserialize(String json, Type type) { Gson gson = new Gson(); return gson.fromJson(json, type); } public static void main(String[] args) { CollectionDeserialize cd = new CollectionDeserialize(); //&#x6574;&#x578B;List String intListJson = &quot;[9,8,0]&quot;; List&lt;Integer&gt; intList = cd.deserialize( intListJson, new TypeToken&lt;List&lt;Integer&gt;&gt;(){}.getType() ); System.out.println(&quot;---------- &#x6574;&#x578B;List ----------&quot;); for (Integer obj : intList) { System.out.println(obj); } // &#x5B57;&#x7B26;&#x4E32;Set String strSetJson = &quot;[\\&quot;Best\\&quot;,\\&quot;World\\&quot;,\\&quot;Hello\\&quot;]&quot;; Set&lt;String&gt; strSet = cd.deserialize( strSetJson, new TypeToken&lt;Set&lt;String&gt;&gt;(){}.getType() ); System.out.println(&quot;---------- &#x5B57;&#x7B26;&#x4E32;Set ----------&quot;); for (String str : strSet) { System.out.println(str); } // Map String objMapJson = &quot;{\\&quot;xiaomin\\&quot;:{\\&quot;name\\&quot;:\\&quot;&#x5C0F;&#x660E;\\&quot;,\\&quot;age\\&quot;:21},\\&quot;marry\\&quot;:{\\&quot;name\\&quot;:\\&quot;&#x9A6C;&#x4E3D;\\&quot;,\\&quot;age\\&quot;:20}}&quot;; Map&lt;String, Person&gt; objMap = cd.deserialize( objMapJson, new TypeToken&lt;Map&lt;String, Person&gt;&gt;(){}.getType() ); System.out.println(&quot;---------- Map ----------&quot;); for (Entry&lt;String, Person&gt; entry : objMap.entrySet()) { System.out.println(entry); } }} &#x8FD0;&#x884C;CollectionDeserialize&#xFF0C;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; &#x2014;&#x2014;&#x2014;- &#x6574;&#x578B;List &#x2014;&#x2014;&#x2014;-980&#x2014;&#x2014;&#x2014;- &#x5B57;&#x7B26;&#x4E32;Set &#x2014;&#x2014;&#x2014;-BestWorldHello&#x2014;&#x2014;&#x2014;- Map &#x2014;&#x2014;&#x2014;-xiaomin=Person [name=&#x5C0F;&#x660E;, age=21]marry=Person [name=&#x9A6C;&#x4E3D;, age=20] &#x56DB;&#x3001;&#x53C2;&#x8003;&#x8D44;&#x6599; Gson Offical Site Gson User Guide","categories":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://aofeng.github.io/tags/java/"},{"name":"gson","slug":"gson","permalink":"http://aofeng.github.io/tags/gson/"},{"name":"json","slug":"json","permalink":"http://aofeng.github.io/tags/json/"},{"name":"serialize","slug":"serialize","permalink":"http://aofeng.github.io/tags/serialize/"},{"name":"序列化","slug":"序列化","permalink":"http://aofeng.github.io/tags/序列化/"}],"keywords":[{"name":"编程","slug":"编程","permalink":"http://aofeng.github.io/categories/编程/"},{"name":"Java","slug":"编程/Java","permalink":"http://aofeng.github.io/categories/编程/Java/"}]}]}